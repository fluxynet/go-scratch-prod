// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	gsp "github.com/fluxynet/go-scratch-prod"
	mock "github.com/stretchr/testify/mock"
)

// TaskService is an autogenerated mock type for the TaskService type
type TaskService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx
func (_m *TaskService) Create(ctx context.Context) (*gsp.Task, error) {
	ret := _m.Called(ctx)

	var r0 *gsp.Task
	if rf, ok := ret.Get(0).(func(context.Context) *gsp.Task); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gsp.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx
func (_m *TaskService) List(ctx context.Context) ([]gsp.Task, error) {
	ret := _m.Called(ctx)

	var r0 []gsp.Task
	if rf, ok := ret.Get(0).(func(context.Context) []gsp.Task); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gsp.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDone provides a mock function with given fields: ctx
func (_m *TaskService) ListDone(ctx context.Context) ([]gsp.Task, error) {
	ret := _m.Called(ctx)

	var r0 []gsp.Task
	if rf, ok := ret.Get(0).(func(context.Context) []gsp.Task); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gsp.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPending provides a mock function with given fields: ctx
func (_m *TaskService) ListPending(ctx context.Context) ([]gsp.Task, error) {
	ret := _m.Called(ctx)

	var r0 []gsp.Task
	if rf, ok := ret.Get(0).(func(context.Context) []gsp.Task); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gsp.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MarkDone provides a mock function with given fields: ctx
func (_m *TaskService) MarkDone(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MarkPending provides a mock function with given fields: ctx
func (_m *TaskService) MarkPending(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx
func (_m *TaskService) Update(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewTaskService interface {
	mock.TestingT
	Cleanup(func())
}

// NewTaskService creates a new instance of TaskService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTaskService(t mockConstructorTestingTNewTaskService) *TaskService {
	mock := &TaskService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
